git介绍及环境搭建
//_______________________________________________________--
git介绍

什么是git
Git版本控制系统是一个分布式系统,用于保存工程源代码历史状态的命令行工具
版本管理工具就是代码存档工具

应用场景:
    多人开发
    异地开发
    版本管理
    版本回滚

git工作流程与常用命令

指令:git init 
作用:初始化git仓库
详细描述:当前新建文件夹中新建一个.git隐藏文件夹

指令:git add
作用:添加文件信息(开始存档)
详细描述:把要提交的文件添加到暂存区(常用)

指令:git commit -m"描述信息"
作用:确认添加信息(确认存档)
详细描述:将暂存区的文件提交到本地仓库中

指令:git log
作用:查看详细日志(存档日志)
详细描述:会显示你每一次存档信息

指令:git log --online 
作用:查看简略版日志信息
详细描述:快速查看版本号

指令:git reset --hard 版本号
作用:版本回滚
详细描述:可以让你的文件回退到历史的某一个版本

操作:
1.新建项目的文件夹,要进入文件夹里面,点击右键git bash here
2.git init 避免写错  出现一个.git隐藏文件夹, 如果没有出现这个文件夹,检查一下自己的电脑隐藏文件夹是不是不显示.
如果不小心项目文件夹建错了，就可以删掉.git文件夹，相当于删档操作（慎用）
git一次只能写一个命令，千万不要两个命令连着写
3.注意每一个命令之间的空格
4.第一次提交会出现让你输入邮箱和用户名, 一行代码一行代码的执行. 复制的时候不要把后面的空格给复制
5.有时候git命名行工具会卡死： 多按几次 q 键就可以退出卡死(相当于卡屏修复)

主要工作流程总结
//______________________________________________________________
1.2.3步一个项目只需一次  4,5,6步会频繁使用  7,8,9步偶尔会用, 10步只会使用一次

1.新建项目文件
2.进入文件夹
3.初始化仓库:  git init  
4.编码
5.添加文件信息:  git add .
6.确认添加信息:   git commit -m"描述信息"
7.查看详细日志信息:  git log 
8.查看简略日志信息:   git log --oneline
9.版本回滚:  git reset --hard 版本号   通过查看历史提交日志信息就可以找到版本号
10.设置邮箱  用户名


git 远程仓库使用流程
//________________________________________________________
远程仓库:就是远程服务器  帮我们存储代码   github

使用流程:
1.在github上创建远程仓库
New repository  新建仓库
仓库名称:建议英文
描述说明      建议公开    其余默认

2.将远程仓库克隆到本地
点击自动复制网址
打开git命令行工具
输入git clone 网址     会自动下载代码
克隆后,文件夹中会出现一个和远程服务器中一样的文件夹

3.本地编写d代码:  git add .  与  git commit -m添加文件信息

4.将本地代码推送至远程 .每天下班一次
使用git push 将本地代码推送至远程仓库

5.将远程代码拉取到本地  每天上班一次
git pull :拉取,用于多人开发  只是拉取新增代码   建议每天上班一次pull

将本地文件夹关联远程仓库
1.在github上创建空仓库   不要勾选readme
2.在本地文件夹中执行命令:   git remote add origin 仓库地址
3.最后执行:  git push -u origin master


git删库跑路
//___________________________________________________________
1.github中找到你要删除的远程仓库
2.点击Settings设置
3.往下滚  找到删除选项   危险动作
    注意:删除之后就找不回来远程仓库  但是我们本地代码还在电脑上,我们可以在建立一个远程仓库来关联本地代码
    步骤:
        首先新建一个空仓库(不要勾选README选项)
        执行命令:git remote add origin 仓库地址
        执行命令:git push -u origin master 


git 其他辅助工具
//_____________________________________________________________
1.vscode自带小黑窗
2.vscode自带图形化工具(不稳定)
3.章鱼猫



git 分支使用流程
//_____________________________________________________________
分支:相当于给你的远程仓库(主分支master)代码copy一份,然后我们在这个copy的代码上进行开发  等功能做好后  再把分支代码推送至主分支

工作流程:
1.新建仓库,就会有一个默认的master分支
    git status   :  查看当前工作分支
2.新建分支--        git branch  分支名(一般分支名dev)
3.切换分支--        git checkout 分支名   (创建之后,你的代码默认还是在主分支上,需要切换工作分支到子分支)
4.在新分支上进行编码
    git add .
    git commit -m"描述信息"
5.合并分支,(功能完成,开始发布证实版本,将子分支合并主分支)
    a.工作分支切换至主分支:  git checkout master 
    b.合并分支(将子分支代码合并值主分支):    git merge  dev
6.删除分支--    git  branch  -d 分支名(慎用)
    注意:删除分支,也需要切换当前分支为主分支
    a.  git branch    查看分支状态
    b.删除分支    git branch -d 分支名

